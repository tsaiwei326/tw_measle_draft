// specific controller for tools widget

var toolsWidgetCtrl = angular.module('toolsWidgetCtrl', ['ui.bootstrap']);

toolsWidgetCtrl.controller('toolsCtrl', ['$scope', '$window', '$uibModal', '$document', 'ToolsService', 'Alertify',

    function ($scope, $window, $uibModal, $document, ToolsService, Alertify) {

		var self = $scope;

		self.myTools = [];
		self.animationsEnabled = true;
		self.newsFeed = [];
		self.isEditMode = false;
        self.displayMode = 'tile';
        self.allToolsJsonData = $window.allToolsJson.tools;
        self.isRearrangeMode = false;

		/*
		* Init
		* =================================
		*/
		self.user = {
		    id: '',
            showAllTools: '',
            sitetags: ''
		};

		self.$watch(function () {
			return self.user;
		}, function (newVal) {
			_loadTools();
		});

		self.placeholder_img_url = "https://cdn.evance.me/portal/shared/images/placeholder.png?v=1458820995";

		self.sortableOptions = {
			helper: 'clone'
		};

		/*
		* Watch for tools to change
		* =================================
		*/
		/*
        self.$on('new-tools', function (event, args) {
			console.log('reload tools');
			// do what you want to do
			_loadTools();
		});
		*/

	    /* CORE F(x) */


		self.addTool = function (parentSelector) {
			if (self.user.id !== '0') {
				self.showAddTools(parentSelector);
			}
			else {
				self.showLoginError(parentSelector);
			}
		};

		self.showAddTools = function (parentSelector) {
			var parentElem = parentSelector ? angular.element($document[0].querySelector('.modal-demo ' + parentSelector)) : undefined;
			var modalInstance = $uibModal.open({
				animation: self.animationsEnabled,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'addTool.html',
				controller: 'addToolsCtrl',
				controllerAs: '$ctrl',
				size: 'large',
				appendTo: parentElem,
				resolve: {
					user: function () {
						return self.user;
					},
					groupId: function () {
					    return null;
					}
				}
			});


			modalInstance.result.then(function (data) {

				var addedToolJson = data.selected;
				var addedToolsArr = data.tools;

				var data = {
					userTableAutogeneratedId: self.user.id
				};

				ToolsService.saveToolsToUser(addedToolJson, data).then(function (response) {

					_.each(addedToolsArr, function (val, index) {
						//
						self.myTools.push(val);
					});

					let msg = response.data;
					Alertify.success(msg);
				}).catch(function (response) {
					console.log(response);
				});
			}, function () {
				// chain anything you want here
			});
		};

		self.showLoginError = function (parentElem) {
			var modalInstance = $uibModal.open({
				animation: self.animationsEnabled,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'loginError.html',
				controller: 'loginErrCtrl',
				controllerAs: '$ctrl',
				size: 'large',
			});

			modalInstance.result.then(function () {
				//do something after showing login err message
			}, function () {
				// chain anything you want here
			});
		};

		self.addGroup = function (parentSelector) {

			if (self.user.id !== '0') {
				self.showAddGroups(parentSelector);
			}
			else {
				self.showLoginError(parentSelector);
			}
		};

		self.showAddGroups = function (parentSelector) {

			var parentElem = parentSelector ? angular.element($document[0].querySelector('.modal-demo ' + parentSelector)) : undefined;
			var modalInstance = $uibModal.open({
				animation: self.animationsEnabled,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'addGroup.html',
				controller: 'addGroupCtrl',
				controllerAs: '$ctrl',
				size: 'large',
				appendTo: parentElem,
				resolve: {
					group: function () {
						return null;
					},
					user: function () {
						return self.user;
					}
				}
			});

			modalInstance.result.then(function (result) {
			    if (result.isNew) {			
					self.myTools.push(result.group);
					root._myTools.push(result.group);
				}
				else if (result.isUpdated) {
				 
				}

			}, function () {
				// do something
			});
		};

		self.toggleEditMode = function (parentSelector) {

			if (self.user.id !== '0') {
			    self.isEditMode = !self.isEditMode;

			    if (self.isEditMode) {
			        
			    } else {
			        
			    }
			}
			else {
				self.showLoginError(parentSelector);
			}
		};

		self.showLoginError = function (parentElem) {
			var modalInstance = $uibModal.open({
				animation: self.animationsEnabled,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'loginError.html',
				controller: 'loginErrCtrl',
				controllerAs: '$ctrl',
				size: 'large',
			});

			modalInstance.result.then(function () {
				//do something after showing login err message
			}, function () {
				// chain anything you want here
			});
		};

		self.startDrag = function (event) {
		    self.isDrag = true;
		};

		self.stopDrag = function (event) {
		    window.setTimeout(function () {
		        self.isDrag = false;
		    }, 200)    		   
		};

		self.editToolGroup = function (event, group, isDrag) {

		    if (!group.IsToolGroup) return;
		    if (isDrag) return;

			if (!event.originalEvent.defaultPrevented) {
				var modalInstance = $uibModal.open({
					animation: self.animationsEnabled,
					ariaLabelledBy: 'modal-title',
					ariaDescribedBy: 'modal-body',
					templateUrl: 'addGroup.html',
					controller: 'addGroupCtrl',
					controllerAs: '$ctrl',
					size: 'large',
					resolve: {
					    user: function () {
					        return self.user;
					    },
						group: function () {
							return group;
						}
					}
				});

				modalInstance.result.then(function (result) {
				                      
					if (result.isUpdated) {

						var i = 0;
						_.each(self.myTools, function (value, key) {
							if (value.Id == result.group.Id) {
								self.myTools[i] = result.group;
							}
							i++;
						});
					}

					// _loadTools();
					//
				}, function () {
					// do something
				});
			} // end if
		};

		self.activateTileMode = function () {
			self.DisplayMode = "tile";
		};
		self.activateListMode = function () {
			self.DisplayMode = "list";
		};

		self.remove = function (tool) {
			let index = self.myTools.indexOf(tool);

			if (index != -1) {
				self.myTools.splice(index, 1);
			}

			var data = {
				userTableAutogeneratedId: self.user.id,
				autoGeneratedId: tool.Id
			};

			ToolsService.deleteTool(data).then(function (response) {
			    Alertify.success(response.data);
			})
			.catch(function () {
				//
			});
		};
		/*
		* Helpers
		* =================================
		*/
		function _loadTools() {

		    //self.user.id = "1";

			var data = {
			    userTableAutogeneratedId: self.user.id,
                showAllTools: self.user.showAllTools,
                sitetags: self.user.sitetags
			};

			ToolsService.getMyTools(data).then(function (response) {

				if (self.myTools.length > 0) {
					_.each(response, function (index, val) {
						//if not in mytools array already now add
						alreadyExisted = _.filter(self.myTools, function (tool) {
							return tool.Id == val.Id;
						});

						if (!alreadyExisted) {
							self.myTools.push(val);
						}
						else {

						}
					});
				}
				else {
					self.myTools = response;
				}

			}).catch(function (response) {
				console.log(response);
			});
        }

        // toogle rearrange tools
        self.toggleRearrangeTools = function () {
            self.isRearrangeMode = !self.isRearrangeMode;
        };

        // hide tools search result on document click
        $(document).mouseup(function (e) {
            var popup = $("#toolsSearchText");
            var searchBox = $('#physicianDashboardToolSearch');
            if (!$(searchBox).is(e.target) && searchBox.has(e.target).length == 0 && !popup.is(e.target) && popup.has(e.target).length == 0) {
                $scope.toolsSearchText = '';
                $scope.$apply();
            }
        });

        self.searchAllTools = function (tool) {
            var searchIn = tool.Name + ' ' + tool.Keywords;
            
            if (!$scope.toolsSearchText ||
                (searchIn.toLowerCase().indexOf($scope.toolsSearchText.toLowerCase()) != -1)) {
                return true;
            }
            return false;


        };
	}
]);
