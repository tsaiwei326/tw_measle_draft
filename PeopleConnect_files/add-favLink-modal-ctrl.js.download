var addFavLinksController = angular.module('addFavLinksController', ['ui.bootstrap']);
addFavLinksController.controller('addFavLinksCtrl', function ($scope, $uibModalInstance, FavLinksService, user) {

    var $ctrl = this;
    var self = $scope;

    $ctrl.selectedFeeds = {};
    $ctrl.tools = [];

    $ctrl.isFavLinksEmpty = false;
    $ctrl.isLoading = false;

    self.user = user;

    var params = {
        userTableAutogeneratedId: self.user.id,
        sitetags: self.user.sitetags
    };

    FavLinksService.getfavLinks(params).then(function (response) {
        $ctrl.favLinks = response.data;
        if ($ctrl.favLinks.length !== 0) {
            $ctrl.isFavLinksEmpty = true;
        }
    }).catch(function (error) {
        console.log('getfavLinks, error ->', error);
    }).finally(function () {
    });

    $ctrl.addLinks = function (event) {

        var data = {
            linkUrl: $ctrl.newUrl,
            linkText: $ctrl.newLinktext
        };

        //var data = $ctrl.newUrl;
        if (data) {
            FavLinksService.addfavLinks(data, params)
                .then(function (response) {
                    //console.log('addLinks, response ->', response);

                    // update fav links in modal once added
                    setTimeout(function () {
                        FavLinksService.getfavLinks(params).then(function (response) {
                            if (!response.data.length) {
                                $ctrl.isFavLinksEmpty = false;
                            } else {
                                $ctrl.isFavLinksEmpty = true;
                            }
                            $ctrl.favLinks = response.data;
                            $ctrl.newUrl = '';
                            $ctrl.newLinktext = '';
                        }).catch(function (response) {
                            console.log(response);
                        });
                    }, 500);

                }).catch(function (error) {
                    console.log('addLinks, error ->', error);
                });
        }
    };

    $ctrl.deleteLinks = function (link) {
        var index = $ctrl.favLinks.indexOf(link);
        if (index != -1) {
            $ctrl.favLinks.splice(index, 1);
        }
        if ($ctrl.favLinks.length === 0) {
            $ctrl.isFavLinksEmpty = false;
        }
        var params = { autogenerateLinkId: link.AutogeneratedLinkId, userTableAutogeneratedId: self.user.id };
        FavLinksService.deletefavLinks(params).then(function (response) {
            console.log('deleteLinks, response ->', response);
        }).catch(function (error) {
            console.log('deleteLinks, error ->', error);
        });
    };

    $ctrl.selectedRow = null;
    $ctrl.setClickedRow = function (index) {
        console.log('setClickedRow -> ', index);
        $ctrl.selectedRow = index;
    }

    $ctrl.moveUp = function (num) {
        console.log('moveUp -> ', num);
        if (num !== null && num > 0) {
            tmp = $ctrl.favLinks[num - 1];
            currentSortOrder = tmp.SortOrder;
            previousSortOrder = $ctrl.favLinks[num].SortOrder;
            $ctrl.favLinks[num].SortOrder = currentSortOrder;
            $ctrl.favLinks[num - 1] = $ctrl.favLinks[num];
            tmp.SortOrder = previousSortOrder;
            $ctrl.favLinks[num] = tmp;
            $ctrl.selectedRow--;

            var data = $ctrl.favLinks;
            var params = { userTableAutogeneratedId: self.user.id };
            FavLinksService.swapfavLinks(data, params).then(function (response) {
                console.log('swapfavLinks, response ->', response);
            }).catch(function (error) {
                console.log('swapfavLinks, error ->', error);
            });
        }
    }

    $ctrl.moveDown = function (num) {
        console.log('moveDown -> ', num);
        if (num !== null && num < $ctrl.favLinks.length - 1) {
            tmp = $ctrl.favLinks[num + 1];
            currentSortOrder = tmp.SortOrder;
            previousSortOrder = $ctrl.favLinks[num].SortOrder;
            $ctrl.favLinks[num].SortOrder = currentSortOrder;
            $ctrl.favLinks[num + 1] = $ctrl.favLinks[num];
            tmp.SortOrder = previousSortOrder;
            $ctrl.favLinks[num] = tmp;
            $ctrl.selectedRow++;

            var data = $ctrl.favLinks;
            var params = { userTableAutogeneratedId: self.user.id };
            FavLinksService.swapfavLinks(data, params).then(function (response) {
                console.log('swapfavLinks, response ->', response);
            }).catch(function (error) {
                console.log('swapfavLinks, error ->', error);
            });
        }
    }

    $ctrl.cancel = function () {
        $uibModalInstance.dismiss(false);
    };
});